{# crud_template.j2
   Generates `app/crud/{{ entity.names.snake }}_crud.py` #}

from sqlalchemy.orm import Session
from app.models.{{ entity.names.snake }} import {{ entity.names.pascal }}
from app.schemas.{{ entity.names.snake }} import {{ entity.names.pascal }}Create

def get_{{ entity.names.snake }}(db: Session, id: {{ entity.fields[0].sql_type }}):
    return db.query({{ entity.names.pascal }}).filter(
        {{ entity.names.pascal }}.{{ entity.fields[0].names.snake }} == id
    ).first()

def get_{{ entity.names.snake }}_list(db: Session, skip: int = 0, limit: int = 100):
    return db.query({{ entity.names.pascal }}).offset(skip).limit(limit).all()

def create_{{ entity.names.snake }}(db: Session, obj_in: {{ entity.names.pascal }}Create):
    db_obj = {{ entity.names.pascal }}(**obj_in.dict())
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def update_{{ entity.names.snake }}(
    db: Session, id: {{ entity.fields[0].sql_type }}, obj_in: {{ entity.names.pascal }}Create
):
    db_obj = get_{{ entity.names.snake }}(db, id)
    if not db_obj:
        return None
    for field, value in obj_in.dict().items():
        setattr(db_obj, field, value)
    db.add(db_obj)
    db.commit()
    db.refresh(db_obj)
    return db_obj

def delete_{{ entity.names.snake }}(db: Session, id: {{ entity.fields[0].sql_type }}):
    obj = get_{{ entity.names.snake }}(db, id)
    if obj:
        db.delete(obj)
        db.commit()
    return obj
