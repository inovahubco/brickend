{#
  models_template.j2

  Generates SQLAlchemy model classes for each entity.
#}

from sqlalchemy import Column, String, Integer, Float, Boolean, Text
from sqlalchemy.orm import declarative_base
import uuid

def generate_uuid():
    """Generate a UUID string for primary keys."""
    return str(uuid.uuid4())

Base = declarative_base()

{% for entity in entities %}
class {{ entity.names.pascal }}(Base):
    __tablename__ = "{{ entity.names.snake }}"

    {% for field in entity.fields -%}
    {{ field.names.snake }} = Column(
        {% if field.type == 'uuid' -%}
        String, default=generate_uuid
        {%- elif field.type == 'string' -%}
        String
        {%- elif field.type == 'text' -%}
        Text
        {%- elif field.type == 'integer' -%}
        Integer
        {%- elif field.type == 'float' -%}
        Float
        {%- elif field.type == 'boolean' -%}
        Boolean
        {%- else -%}
        String
        {%- endif %}
        {%- if field.is_primary_key %}, primary_key=True{% endif %}
        {%- if not field.is_nullable %}, nullable=False{% endif %}
        {%- if field.is_unique %}, unique=True{% endif %}
    )
    {% endfor %}

{% endfor %}