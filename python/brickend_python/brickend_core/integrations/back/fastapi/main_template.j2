{# main_template.j2
   Generates `app/main.py` mounting all routers from `app/routers` #}

from contextlib import asynccontextmanager
from fastapi import FastAPI
from app.database import engine
from app.models import Base

{% for entity in entities %}
from app.routers.{{ entity.names.snake }}_router import router as {{ entity.names.snake }}_router
{% endfor %}

def create_tables():
    """
    Create all tables in the database.
    This function is called during application startup.
    """
    print("🔄 Creating database tables...")
    print(f"🔧 Engine: {engine}")
    print(f"📋 Tables to create: {list(Base.metadata.tables.keys())}")

    try:
        # Force creation of all tables
        Base.metadata.create_all(bind=engine, checkfirst=True)
        print("✅ Database tables created successfully")

        # Verify tables were created
        from sqlalchemy import inspect
        inspector = inspect(engine)
        existing_tables = inspector.get_table_names()
        print(f"📊 Tables in database: {existing_tables}")

        # Validate that expected tables exist
        expected_tables = list(Base.metadata.tables.keys())
        missing_tables = [t for t in expected_tables if t not in existing_tables]
        if missing_tables:
            print(f"⚠️  Missing tables: {missing_tables}")
        else:
            print("✅ All expected tables exist")

    except Exception as e:
        print(f"❌ Error creating tables: {e}")
        import traceback
        traceback.print_exc()
        raise

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan manager.
    Creates database tables on startup.
    """
    create_tables()
    yield
    print("🔚 Application shutdown")

app = FastAPI(
    title="{{ project_name | default('FastAPI App') }}",
    version="{{ project_version | default('0.1.0') }}",
    lifespan=lifespan
)

# Create tables immediately if not already created
# This ensures tables exist even if lifespan isn't called (e.g., in tests)
try:
    from sqlalchemy import inspect
    inspector = inspect(engine)
    existing_tables = inspector.get_table_names()
    expected_tables = list(Base.metadata.tables.keys())

    if not all(table in existing_tables for table in expected_tables):
        print("🔧 Tables missing, creating them now...")
        create_tables()
except Exception as e:
    print(f"⚠️  Could not verify tables, attempting creation: {e}")
    create_tables()

{% for entity in entities %}
app.include_router(
    {{ entity.names.snake }}_router,
    prefix="/{{ entity.names.kebab }}s",
    tags=["{{ entity.names.pascal }}"]
)
{% endfor %}

@app.get("/", tags=["root"])
def read_root():
    return {"message": "Welcome to {{ project_name | default('your app') }}!"}