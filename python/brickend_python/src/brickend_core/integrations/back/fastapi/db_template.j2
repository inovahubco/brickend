{#
db_template.j2

Generates `app/database.py` with SQLAlchemy engine, SessionLocal, and FastAPI dependency.

This template:
  - Determines `SQLALCHEMY_DATABASE_URL` from provided `database_url` or defaults to a file-based SQLite URL.
  - Uses `StaticPool` and disables thread checks for SQLite connections.
  - Defines `engine`, `SessionLocal`, and the `get_db` dependency generator.
#}
"""
app/database.py
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
{% set db_url = database_url if database_url and database_url.strip() else "sqlite:///:memory:" %}
from sqlalchemy.pool import StaticPool

# If no URL provided, use a file-based SQLite for testing to avoid in-memory concurrency issues
{% if db_url == "sqlite:///:memory:" -%}
SQLALCHEMY_DATABASE_URL = "sqlite:///./test_app.db"
{% else -%}
SQLALCHEMY_DATABASE_URL = "{{ db_url }}"
{% endif -%}

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
    echo=False,  # Set to True for SQL debugging
)

SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine,
)

def get_db():
    """
    FastAPI dependency generator: yield a database session and ensure closure.

    Yields:
        Session: SQLAlchemy database session.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
