{# router_template.j2 #}
"""
app/routers/{{ entity.names.snake }}_router.py

Provides CRUD endpoints for the {{ entity.names.pascal }} entity.

Endpoints:
  - GET "/"      : List all {{ entity.names.pascal }} records with pagination.
  - GET "/{id}"  : Retrieve a single {{ entity.names.pascal }} by primary key.
  - POST "/"     : Create a new {{ entity.names.pascal }} record.
  - PUT "/{id}"  : Update an existing {{ entity.names.pascal }} record.
  - DELETE "/{id}": Delete a {{ entity.names.pascal }} record.
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from app.crud.{{ entity.names.snake }}_crud import (
    get_{{ entity.names.snake }},
    get_{{ entity.names.snake }}_list,
    create_{{ entity.names.snake }},
    update_{{ entity.names.snake }},
    delete_{{ entity.names.snake }},
)
from app.schemas import (
    {{ entity.names.pascal }}Create,
    {{ entity.names.pascal }}Read,
)
from app.database import get_db
{% set first_field = entity.fields[0] %}
{% if first_field.type == 'uuid' %}from uuid import UUID
{% elif first_field.type == 'datetime' %}from datetime import datetime
{% endif %}

router = APIRouter(
    tags=["{{ entity.names.pascal }}"]
)


@router.get("/", response_model=list[{{ entity.names.pascal }}Read])
def read_{{ entity.names.snake }}_list_endpoint(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db),
):
    """Retrieve a list of {{ entity.names.pascal }} records with pagination."""
    return get_{{ entity.names.snake }}_list(db, skip=skip, limit=limit)


@router.get("/{id}", response_model={{ entity.names.pascal }}Read)
def read_{{ entity.names.snake }}_endpoint(
    id: {% if first_field.type == 'uuid' %}UUID{% elif first_field.type == 'string' %}str{% elif first_field.type == 'text' %}str{% elif first_field.type == 'integer' %}int{% elif first_field.type == 'float' %}float{% elif first_field.type == 'boolean' %}bool{% elif first_field.type == 'datetime' %}datetime{% else %}str{% endif %},
    db: Session = Depends(get_db),
):
    """Retrieve a single {{ entity.names.pascal }} by its primary key."""
    obj = get_{{ entity.names.snake }}(db, id)
    if not obj:
        raise HTTPException(status_code=404, detail="{{ entity.names.pascal }} not found")
    return obj


@router.post("/", response_model={{ entity.names.pascal }}Read)
def create_{{ entity.names.snake }}_endpoint(
    obj_in: {{ entity.names.pascal }}Create,
    db: Session = Depends(get_db),
):
    """Create a new {{ entity.names.pascal }} record."""
    return create_{{ entity.names.snake }}(db, obj_in)


@router.put("/{id}", response_model={{ entity.names.pascal }}Read)
def update_{{ entity.names.snake }}_endpoint(
    id: {% if first_field.type == 'uuid' %}UUID{% elif first_field.type == 'string' %}str{% elif first_field.type == 'text' %}str{% elif first_field.type == 'integer' %}int{% elif first_field.type == 'float' %}float{% elif first_field.type == 'boolean' %}bool{% elif first_field.type == 'datetime' %}datetime{% else %}str{% endif %},
    obj_in: {{ entity.names.pascal }}Create,
    db: Session = Depends(get_db),
):
    """Update an existing {{ entity.names.pascal }} record by primary key."""
    updated = update_{{ entity.names.snake }}(db, id, obj_in)
    if not updated:
        raise HTTPException(status_code=404, detail="{{ entity.names.pascal }} not found")
    return updated


@router.delete("/{id}", response_model={{ entity.names.pascal }}Read)
def delete_{{ entity.names.snake }}_endpoint(
    id: {% if first_field.type == 'uuid' %}UUID{% elif first_field.type == 'string' %}str{% elif first_field.type == 'text' %}str{% elif first_field.type == 'integer' %}int{% elif first_field.type == 'float' %}float{% elif first_field.type == 'boolean' %}bool{% elif first_field.type == 'datetime' %}datetime{% else %}str{% endif %},
    db: Session = Depends(get_db),
):
    """Delete a {{ entity.names.pascal }} record by primary key."""
    deleted = delete_{{ entity.names.snake }}(db, id)
    if not deleted:
        raise HTTPException(status_code=404, detail="{{ entity.names.pascal }} not found")
    return deleted
