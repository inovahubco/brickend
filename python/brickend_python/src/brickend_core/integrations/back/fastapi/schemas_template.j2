{# schemas_template.j2

Generates Pydantic models (schemas) for FastAPI validation.
Each entity yields three classes:
  - {{ entity.names.pascal }}Base: fields excluding primary key.
  - {{ entity.names.pascal }}Create: same as Base, used for creation.
  - {{ entity.names.pascal }}Read: includes primary key, used for responses.
#}

"""
schemas_template.j2

Pydantic schemas for FastAPI, generated per entity.
"""

from pydantic import BaseModel, ConfigDict
from typing import Optional
from uuid import UUID
from datetime import datetime

{% for entity in entities %}
class {{ entity.names.pascal }}Base(BaseModel):
    """Base schema for {{ entity.names.pascal }} (excludes primary key)."""
    {% for field in entity.fields -%}
    {% if not field.is_primary_key -%}
    {{ field.names.snake }}: {% if field.type == 'uuid' %}UUID{% elif field.type == 'string' %}str{% elif field.type == 'text' %}str{% elif field.type == 'integer' %}int{% elif field.type == 'float' %}float{% elif field.type == 'boolean' %}bool{% elif field.type == 'datetime' %}datetime{% else %}str{% endif %}{% if field.is_nullable %} | None = None{% endif %}  # {{ field.type }}{% if field.is_nullable %}, optional{% endif %}
    {% endif -%}
    {% endfor %}

class {{ entity.names.pascal }}Create({{ entity.names.pascal }}Base):
    """Schema for creating a new {{ entity.names.pascal }}."""
    pass

class {{ entity.names.pascal }}Read({{ entity.names.pascal }}Base):
    """Schema for reading {{ entity.names.pascal }}, includes primary key."""
    {% for field in entity.fields -%}
    {% if field.is_primary_key -%}
    {{ field.names.snake }}: {% if field.type == 'uuid' %}UUID{% elif field.type == 'string' %}str{% elif field.type == 'text' %}str{% elif field.type == 'integer' %}int{% elif field.type == 'float' %}float{% elif field.type == 'boolean' %}bool{% elif field.type == 'datetime' %}datetime{% else %}str{% endif %}  # primary key
    {% endif -%}
    {% endfor %}

    model_config = ConfigDict(from_attributes=True)

{% endfor %}
