"""
migrate_db.py

CLI command to autogenerate and apply Alembic migrations from SQLAlchemy models.

This module provides:
  - find_alembic_ini: locate the `alembic.ini` file.
  - get_revision_files: list existing revision filenames in versions directory.
  - is_migration_empty: detect empty migration scripts.
  - migrate_db: Typer command to generate and apply migrations.
"""

import subprocess
from pathlib import Path
from typing import Set

import typer

app = typer.Typer(add_completion=False)


def find_alembic_ini() -> Path:
    """Locate `alembic.ini` in the current working directory.

    Returns:
        Path: Path to the `alembic.ini` file.

    Raises:
        FileNotFoundError: If `alembic.ini` is not found.
    """
    alembic_path = Path.cwd() / "alembic.ini"
    if not alembic_path.exists():
        raise FileNotFoundError("alembic.ini not found in the current directory.")
    return alembic_path


def get_revision_files(versions_dir: Path) -> Set[str]:
    """Return a set of Python filenames in the migrations `versions` directory.

    Args:
        versions_dir (Path): Path to the `migrations/versions` directory.

    Returns:
        Set[str]: Filenames of all `.py` files present, or empty set if directory missing.
    """
    if not versions_dir.exists() or not versions_dir.is_dir():
        return set()
    return {f.name for f in versions_dir.glob("*.py")}


def is_migration_empty(migration_file: Path) -> bool:
    """Check whether a migration file contains only empty upgrade/downgrade functions.

    Args:
        migration_file (Path): Path to the revision file to inspect.

    Returns:
        bool: True if both `upgrade()` and `downgrade()` contain only `pass` or comments.
    """
    try:
        content = migration_file.read_text(encoding="utf-8")
        lines = [line.strip() for line in content.splitlines() if line.strip()]

        upgrade_empty = False
        downgrade_empty = False

        for idx, line in enumerate(lines):
            if line.startswith("def upgrade"):
                next_lines = lines[idx + 1 : idx + 4]
                upgrade_empty = all(
                    ("pass" in l or l.startswith("#") or l == "")
                    for l in next_lines
                    if not l.startswith("def")
                )
            elif line.startswith("def downgrade"):
                next_lines = lines[idx + 1 : idx + 4]
                downgrade_empty = all(
                    ("pass" in l or l.startswith("#") or l == "")
                    for l in next_lines
                    if not l.startswith("def")
                )

        return upgrade_empty and downgrade_empty
    except Exception:
        return False


@app.command("db")
def migrate_db() -> None:
    """Generate and apply Alembic migrations based on SQLAlchemy model changes.

    Workflow:
      1. Verify presence of `alembic.ini`.
      2. Capture existing revisions in `migrations/versions`.
      3. Run `alembic revision --autogenerate -m "autogenerated"`.
         - If no changes detected, exit gracefully.
      4. Identify new revision files and remove if empty.
      5. Print creation message(s) for valid new revisions.
      6. Run `alembic upgrade head` to apply migrations.
      7. Print success or error messages accordingly.

    Raises:
        typer.Exit: On any error or when no changes are detected.
    """
    # Step 1: verify configuration
    try:
        _ = find_alembic_ini()
    except FileNotFoundError as e:
        typer.echo(f"Error: {e} Have you run `brickend init`?")
        raise typer.Exit(code=1)

    migrations_dir = Path.cwd() / "migrations"
    versions_dir = migrations_dir / "versions"
    pre_revisions = get_revision_files(versions_dir)

    typer.echo("Generating new Alembic revision (autogenerate)...")
    result_rev = subprocess.run(
        ["alembic", "revision", "--autogenerate", "-m", "autogenerated"],
        cwd=Path.cwd(),
        capture_output=True,
        text=True,
    )
    if result_rev.returncode != 0:
        stderr = result_rev.stderr.lower()
        if "nothing to do" in stderr or "no changes in schema" in stderr:
            typer.echo("No changes detected in the models; no migration file created.")
            raise typer.Exit(code=0)

        typer.echo(f"Error generating revision:\n{result_rev.stderr.strip()}")
        raise typer.Exit(code=1)

    post_revisions = get_revision_files(versions_dir)
    new_revisions = post_revisions - pre_revisions
    if not new_revisions:
        typer.echo("No new revision file found; no changes to migrate.")
        raise typer.Exit(code=0)

    # Remove any empty migrations
    for rev in sorted(new_revisions):
        migration_file = versions_dir / rev
        if is_migration_empty(migration_file):
            typer.echo("No changes detected in the models; removing empty migration file.")
            migration_file.unlink()
            raise typer.Exit(code=0)

    # Notify about valid new migrations
    for rev in sorted(new_revisions):
        typer.echo(f"✅ Migration '{rev}' created.")

    typer.echo("Applying migration to the database (upgrade head)...")
    result_up = subprocess.run(
        ["alembic", "upgrade", "head"],
        cwd=Path.cwd(),
        capture_output=True,
        text=True,
    )
    if result_up.returncode != 0:
        typer.echo(f"Error applying migration:\n{result_up.stderr.strip()}")
        raise typer.Exit(code=1)

    typer.echo("✅ Database upgraded to the latest revision.")
