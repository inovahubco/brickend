"""
migrate_db.py
"""

import subprocess
from pathlib import Path
from typing import Set

import typer


app = typer.Typer(add_completion=False)


def find_alembic_ini() -> Path:
    """
    Locate `alembic.ini` in the current working directory.
    Raise FileNotFoundError if not found.
    """
    alembic_path = Path.cwd() / "alembic.ini"
    if not alembic_path.exists():
        raise FileNotFoundError("alembic.ini not found in the current directory.")
    return alembic_path


def get_revision_files(versions_dir: Path) -> Set[str]:
    """
    Return a set of all Python filenames currently in the migrations/versions directory.
    """
    if not versions_dir.exists() or not versions_dir.is_dir():
        return set()
    return {f.name for f in versions_dir.glob("*.py")}


def is_migration_empty(migration_file: Path) -> bool:
    """
    Check if a migration file contains only empty upgrade/downgrade functions.
    """
    try:
        content = migration_file.read_text(encoding="utf-8")
        # Check if both upgrade and downgrade functions only contain "pass"
        lines = [line.strip() for line in content.split('\n') if line.strip()]

        upgrade_empty = False
        downgrade_empty = False

        for i, line in enumerate(lines):
            if line.startswith('def upgrade'):
                # Check next few lines for content
                next_lines = lines[i+1:i+4]
                upgrade_empty = all('pass' in l or l.startswith('#') or l == '' for l in next_lines if not l.startswith('def'))
            elif line.startswith('def downgrade'):
                # Check next few lines for content
                next_lines = lines[i+1:i+4]
                downgrade_empty = all('pass' in l or l.startswith('#') or l == '' for l in next_lines if not l.startswith('def'))

        return upgrade_empty and downgrade_empty
    except Exception:
        return False


@app.command("db")
def migrate_db() -> None:
    """
    Create and apply Alembic migrations based on changes in the SQLAlchemy models.

    1. Verifies that `alembic.ini` exists in the current directory.
    2. Runs `alembic revision --autogenerate -m "autogenerated"`.
       - If no new revision file appears, prints a notice and exits.
    3. Runs `alembic upgrade head` to apply the new migration.
    4. Prints success messages for migration creation and database upgrade.
    """
    try:
        _ = find_alembic_ini()
    except FileNotFoundError as e:
        typer.echo(f"Error: {e} Have you run `brickend init`?")
        raise typer.Exit(code=1)

    migrations_dir = Path.cwd() / "migrations"
    versions_dir = migrations_dir / "versions"

    pre_revisions = get_revision_files(versions_dir)

    typer.echo("Generating new Alembic revision (autogenerate)...")
    result_rev = subprocess.run(
        ["alembic", "revision", "--autogenerate", "-m", "autogenerated"],
        cwd=Path.cwd(),
        capture_output=True,
        text=True,
    )
    if result_rev.returncode != 0:
        stderr = result_rev.stderr.lower()
        if "nothing to do" in stderr or "no changes in schema" in stderr:
            typer.echo("No changes detected in the models; no migration file created.")
            raise typer.Exit(code=0)

        typer.echo(f"Error generating revision:\n{result_rev.stderr.strip()}")
        raise typer.Exit(code=1)

    post_revisions = get_revision_files(versions_dir)
    new_revisions = post_revisions - pre_revisions

    if not new_revisions:
        typer.echo("No new revision file found; no changes to migrate.")
        raise typer.Exit(code=0)

    # Check if the new migration is actually empty
    new_migration_files = [versions_dir / rev for rev in new_revisions]
    for migration_file in new_migration_files:
        if is_migration_empty(migration_file):
            typer.echo("No changes detected in the models; removing empty migration file.")
            migration_file.unlink()
            raise typer.Exit(code=0)

    for rev_file in sorted(new_revisions):
        typer.echo(f"✅ Migration '{rev_file}' created.")

    typer.echo("Applying migration to the database (upgrade head)...")
    result_up = subprocess.run(
        ["alembic", "upgrade", "head"],
        cwd=Path.cwd(),
        capture_output=True,
        text=True,
    )
    if result_up.returncode != 0:
        typer.echo(f"Error applying migration:\n{result_up.stderr.strip()}")
        raise typer.Exit(code=1)

    typer.echo("✅ Database upgraded to the latest revision.")
